stages:
  - update
  - build
  - test
  - bench
  - collect

variables:
  PIPELINE_NAME:
    description: "Optional name to better identify this pipeline"
    value: ""
  CPU_CORES:
    description: "Select number of CPU cores and test workers"
    value: "8"
  PARALLEL_JOBS:
    description: "Number of parallel Slurm array jobs per CI job"
    value: "8"
  SLURM_TIMEOUT:
    description: "Timeout"
    value: "0-12" # [days-hours]
  MANUAL_CFG_PATH:
    description: "Use this config file instead of configs stored in the repo. Path must be accessible to runner"
    value: ""
  SLURM_QOS:
    description: "Optional QoS option (include --qos, e.g., --qos express)"
    value: ""

workflow:
  name: '$PIPELINE_NAME'

FINN Benchmark Suite:
  id_tokens:
    CI_JOB_JWT:
      aud: https://git.uni-paderborn.de
  stage: bench
  variables:
    SCHEDULER_PARAMETERS: "-A $PROJECT_ACCOUNT -p normal -t $SLURM_TIMEOUT $SLURM_QOS --nodes 1 --ntasks 1 --cpus-per-task $CPU_CORES --mem 128G --array 0-$( expr $PARALLEL_JOBS - 1 )"
    PYTEST_PARALLEL: "$CPU_CORES"
    FINN_SINGULARITY: "$PATH_SINGULARITY_IMG/xilinx/finn_dev.sif"
  before_script:
    - cp -dfR .. $PATH_WORKDIR # Copy to working directory (e.g. RAMdisk)
    - cd $PATH_WORKDIR/finn
    - module load system singularity
  script:
    - ./run-docker.sh python benchmarking/bench.py
  artifacts:
    name: "bench_artifacts"
    when: always
    paths:
      - bench_artifacts/

Collect Results:
  id_tokens:
    CI_JOB_JWT:
      aud: https://git.uni-paderborn.de
  stage: collect
  tags:
    - image_build
  script:
    - python benchmarking/collect.py bench_artifacts/tasks_output bench_results.json
  artifacts:
    name: "bench_results"
    when: always
    paths:
      - bench_results.json

#TODO: more control via (optional) variables
#TODO: enable json config file input
#TODO: move power measurement from polling-based script to its own job/runner
#TODO: ensure a freshly initialized workdir on job/runner level (e.g. created directories seem to stay there)
#TODO: (optionally) save ALL build artifacts/logs/temporary files to artifacts or PFS for debugging (maybe via Jacamar feature of setting individual persistent workdirs?)
#TODO: save stdout log separately as job artifact due to 4 MB limit (relevant for full test suite runs)
#TODO: fix clock frequency discrepancies between setting, synth, and driver
#TODO: run fetch-repos here and cache it between jobs due to GitHub server issues